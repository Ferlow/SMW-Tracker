const { app, BrowserWindow, Tray, Menu, ipcMain } = require('electron');
const { setupTitlebar, attachTitlebarToWindow } = require('custom-electron-titlebar/main');
const path = require('path');

const webserver = require('./webserver');

// ugly hack to remove menu generated by custom-electron-titlebar
const menu = new Menu();
Menu.setApplicationMenu(menu);

setupTitlebar();

function createWindow() {
    mainWindow = new BrowserWindow({
        width: 800,
        height: 350,
        titleBarStyle: 'hidden',
        resizable: false,
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'),
            contextIsolation: true,
            sandbox: false,
        }
    });

    // Load the GUI HTML file
    mainWindow.loadFile(path.join(__dirname, 'frontend', 'gui.html'));

    // Create the Tray instance
    const iconPath = path.join(__dirname, 'build', 'icons', 'icon.png');
    let tray = new Tray(iconPath);
    const contextMenu = Menu.buildFromTemplate([
        {
            label: 'Open', click: function () {
                mainWindow.show()
            }
        },
        {
            label: 'Quit', click: function () {
                app.quit()
            }
        }
    ])

    tray.setToolTip('Your App Name')
    tray.setContextMenu(contextMenu)

    // Minimize mainWindow to the system tray
    mainWindow.on('minimize', function (event) {
        event.preventDefault()
        mainWindow.hide()
    })

    // Show the mainWindow when the tray icon is clicked
    tray.on('click', function () {
        mainWindow.show()
    })

    // Nullify mainWindow when the window is closed.
    mainWindow.on('closed', () => {
        mainWindow = null;
    });

    attachTitlebarToWindow(mainWindow);
}

// When app is ready, open the window
app.whenReady().then(() => {
    createWindow();
});

// Quit when all windows are closed, except on macOS
app.on('window-all-closed', function () {
    if (process.platform !== 'darwin') app.quit()
});

app.on('activate', function () {
    if (BrowserWindow.getAllWindows().length === 0) createWindow()
});

ipcMain.on('start-server', (event, data) => {
    webserver.startServer(data);
    mainWindow.webContents.send('server-status', true); // Notify renderer the server has started
});

ipcMain.on('stop-server', () => {
    webserver.stopServer();
    mainWindow.webContents.send('server-status', false); // Notify renderer the server has stopped
});